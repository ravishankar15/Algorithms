AVL Tree : It is a self balancing Binary Search Tree where the diffrence between the heights of the left and right subtree cannot be more than one for all nodes.

Why AVL Trees?
Most of the BST operations (e.g., search, max, min, insert, delete.. etc) take O(h) time where h is the height of the BST. The cost of these operations may become O(n) for a skewed Binary tree. If we make sure that height of the tree remains O(Logn) after every insertion and deletion, then we can guarantee an upper bound of O(Logn) for all these operations. The height of an AVL tree is always O(Logn) where n is the number of nodes in the tree


There are four types of rotations possible,(hl - hr)
	-> balance > 1 && key < root.left.key ------ Right Rotation
	-> balance < -1 && key > root.right.key ------ Left Rotation
	-> balance > 1 && key > root.left.key ----- Left Right Rotation
	-> balance < -1 && key < root.right.key ------- Right Left Rotation