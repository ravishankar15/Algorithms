Graph:
    - A Graph is a non linear data structure consisting of nodes and edges. The nodes are sometimes refered to as vertices and the edges are lines or arcs that connect any two nodes in a graph.
    - Graph data structure consist of two components
        1) A finite set of vertices also called as nodes
        2) A finite set of ordered pair of the form (u,v) called as edge. The pair is ordered because (u,v) is not same as (v,u) in case of directed graph(di-graph).

Graph Representation:
    - The graph can be represented in any of the following ways,
        1) Adjacency Matrix
        2) Adjacency List
        3) Incidence Matrix
        4) Incidence List
    - 1 and 2 are the commonly used representations. However the choice of the representation is situation specific. It totally depends on the type of operations to be performed and ease of use

    Adjacency Matrix:
        - It is a 2D array of size v * v where v is the number of vertices in a graph.
        - Let the 2D array be adj[][], a slot adj[i][j] = 1 indicates that there is an edge from vertex i to vertex j
        - Adjacency matrix for undirected graph is always symmetric. i.e., matrix A is same as A', A' is the transpose of A which means the first row of A becomes the first column of A' and the same as for all
        - Adjacency matrix is also used to represent weighted graphs. if adj[i][j] = w, then there is an edge from vertex i and j with weight w

        Pros: Representation is easier to implement and follow. Removing an edge takes O(1) time. Queries like whether there is an edge from vertex u to vertex v can be done in O(1)

        cons: Consumes more space O(v^2). Even if the graph is sparse(contains less number of edges), it consumes the same space. Adding a vertex is O(v^2) time.

    Adjacency List:
        - An array of list is used. Size of the array is equal to the number of vertices.
        - Let the array be array[]. An entry array[i] represents the list of vertices adjacent to the i'th vertex.
        - This representation can also be used to represent the weighted graph. The weights of edges can be represented as list of pairs.

    - Refer https://www.geeksforgeeks.org/graph-and-its-representations/