c
msf.is_empty?
dp[i]
n
nums[i]
c
dp
n
dp
dp[i]
c
min_idx
@pointers.inspect
rp-lp
rp-lo
n
min_idx
@first_idx
@pointers.inspect
rp
lp
n
s
min_val
c
min_val
c
min_val
c
@heap_size
rp
lp
@pointers.inspect
n
@last_idx
@first_idx
rp
n
@first_idx
@pointers
s
n
s
n
min_idx
min_val
n
c
@pointers[min_idx]
lp
rp
rp-lp
n
s
min_val
min_Val
min_idx
c
min_idx
min_val
c
n
@pointers.inspect
n
@pointers[rp]
rp
lp
n
min_idx == @first_idx
n
s
n
s
min_idx
min_val
c
@pointers[rp]
n
lp
min_idx
@pointers[lp]
n
@pointers[lp]
lp >= 0
rp
lp
n
s
n
min_idx - lp <= @max_diff
lp
min_idx - lp
n
@len-1
min_idx
rp
lp
n
s
c
msf.harr.inspect
c
i.to_i
lmin[i]
lmax[i]
c
lmin[lmax[i]]
lmax[i]
i.to_i
c
lmax[4]
c
lmax[3]
c
n
c
i.to_i
lmax[i]
c
lmax[i]
c
nums[i]
c
rt_len
value
value - rt_len + 1
sum(value)
n
lsum
n
lt_len
value
(value-lt_len).abs
sum(value)
n
rt_len
lt_len
value
c
min_sum
n
c
rsum
lsum
n
c
rt
lt
length
n
c
length
n
res
c
length
n
length
c
n
length
n
lt
c
rt
lt
length.inspect
n
a-lt
exit
c
mid
c
mid
c
mid
sold_balls
c
sold_balls
n
balls
n
s
n
s
mid
n
nn
n
c
n
max_profit
max_proft
mid
c
limit
balls-limit
sum(balls)
(sum(balls) - sum(balls-limit-1))
sold_balls
n
limit
balls
n
(sum(balls) - sum(balls-limit-1))
sold_balls
n
limit
balls
s
n
s
n
c
balls-limit
sum(balls)
(sum(balls) - sum(balls-limit))
limit
balls
n
balls-limit
n
s
n
s
n
c
balls-limit
n
limit
balls
s
n
s
n
c
sold_balls
n
s
n
c
mid
n
pn
proft
n
mid
n
mid
c
n
mid
n
mid
n
orders
