Background:
  - Aims to "Separate the construction of a complex object from its reperesentation so that the same construction process can create diffrent representations"
  - It is used to construct the object step by step and the final step would return the object
  - Parse the complex representation, create one of several objects.

Participents.,
  - Product - defines the type of the complex object that is to be generated by the builder pattern.
  - Builder - abstract base class that defines all of the steps that must be taken in order to correctly create a product. Each step is abstract and the actual implementation is done in the concrete subclasses.
  - Concrete Builder -  These classes contains the functionality to create a particular complex product.
  - Director  - The director class controls the algorithm that generates the final product object.


Check List:
  - Decide if a common input and many possible representation (or outputs) is the problem in hand
  - Encapsulate the parsing of the common input in a reader class.
  - Design a standard protocol for creating all possible output representations. Capture the steps in this protocol in a Builder interface.
  - Define a builder derived class for each target representation.
  - The client creates a reader object and a builder object, and registers the latter with the former.
  - The client asks the Reader to construct.
  - The client asks the builder to return the result.


Example.,
  - Consider home construction where it involves many steps basement construction, roof construction but the same can be used to built diffrent type of buildings.