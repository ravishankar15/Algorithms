Background:
  - Composite pattern is a partitioning design pattern and describes a group of objects that is treated the same way as a single instance of the same type of object.
  - The intent of a composite is to "compose" objects into tree structures to represent part-whole hierarchies. It allows us to have a tree structure and ask each node in the tree structure to perform a task.

- Compose objects into tree structure to represent part-whole hierarchies. Composite lets client treat individual objects and composition of objects uniformly.
- While dealing with tree data structure programmers often have to discriminate between a leaf-node and a branch. This makes code more complex, and therefore, error prone. The solution is an interface that allows treating complex and primitive objects uniformly.
- In object-oriented programming, a composite is an object designed as a composition of one-or-more similar objects, all exibiting similar functionality. This is known as a "has-a" relationship between the objects.

The composite pattern has 4 participants.,
  - Component 
    - Component declares the interface for objects in the composition and for accessing and managing its child components. It also implements default behaviour for the interface common to all classes as appropriate.
  - Leaf
    - Leaf defines behaviour for primitive objects in the composition. It represents the leaf objects in the composition.
  - Composite
    - Composite store child components and implements child related opreations in the component interface.
  - Client
    - Client manipulates the objects in the composition through the component interface.

  - The client uses the component class interface to interact with objects in the composition structure. 
  - If recipient is a leaf then request is handled directly. 
  - If the recipient is a composite, then it usually forwards request to its child components, possibly performing additional operations before and after forwarding.

Example.,
  - Organisation structure general managers -> managers -> developers. Now you can set a tree structure and ask each node to perform common operations like getSalary()
  - Composite design pattern treats each node in two ways.,
    Composite - it means it can have other objects below it.
    leaf -  it means it has no objects below it.
  - There can be many children to a single parent but only one parent per child