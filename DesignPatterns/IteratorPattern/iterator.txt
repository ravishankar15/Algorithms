Background:
  - Iterator pattern is relatively simple and frequently used pattern
  - There are lot of data structures/collections available in every language.
  - Each collection must provide an iterator that lets it iterate through its objects. However while doing so it should make sure that it does not expose its implementation.

  - Suppose we are building an application that requires us to maintain a list of notifications. Eventually, some part of your code will require to iterate over all notifications.
  - If we implement as an array,
    for(int i=0; i<notifications.length; i++)
      Notification notification = notifications[i];
  - If it is an array list,
    for (int i = 0; i < notificationList.size(); i++)
      Notification notification = (Notification)notificationList.get(i);
  - If it is an set or tree,
      Iterator iterator = notificationList.createIterator();
      while (iterator.hasNext()){
          Notification notification = iterator.next());
      }

  - The iterator pattern provides a way to access the elements of an aggregate object without exposing its underlying representation