Background:
  - Chain of responsibility pattern is used to achive loose coupling in software design where a request from client is passed to a chain of objects to process them.
  - The objects in the chain will decide who will be processing the request and wheather the request is required to be sent to the next object in the chain or not.

When and where to use it.,
  - when you want to decouple a request's sender and receiver
  - Multiple objects, determined at runtime, are candidates to handle a request.
  - When you dont want to specify handlers explicitly in your code.
  - When you want to issue a request to one of the several objects without specifying the receiver explictly.
  - Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request. Chain the receiving object and pass the request along the chain until an object handles it.
  - Launch-and-leave requests with a single processing pipeline that contains many possible handlers.
  - An object oriented linked list with recursive traversal.

Participents.,
  - Handler - This can be an interface which will primarily receive the requests and dispatches the request to the chain of handlers. It has reference of only the first handler in the chain and does not know anything about the rest of the handlers.
  - Concrete Handler -  These are actual handlers of the request chained in some squential order.
  - Client -  Originator of request and this will access tha handler to handle it.

Check List.,
  - The base class maintains the next pointer.
  - Each derived class implements its contribution for handling the request.
  - If the request needs to be passed on then the derived class "calls back" to the base class which delegates to the "next" pointer.
  - The client or some third party creates and links the chain
  - The client launches and leaves each request with the root of the chain
  - Recursive delegation produces the illusion of magic.