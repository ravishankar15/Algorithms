Background:
  - Flyweight pattern is one of the structural design patterns as this pattern provides ways to decrease object count thus improving application required objects structure.
  - Flyweight pattern is used when we need to create large number of similar objects(say 10^5).
  - One important note of flyweight is that the objects are immutable. This means that the objects cannot be modified once the objects are constructed.

  - Why do we care for objects,
    - Less number of objects reduces the memory usage, and it manages to keep us away from errors related to memory like java.lang.OutOfMemoryError.
    - Although creating an object in java is really fast, we can still reduce the execution time of our program by sharing objects.
  - In flyweight pattern we use HashMap that stores reference to the object which have already been created, every object is associated with a key. Now when the client wants to create an object he simply has to pass a key associated with the object and if the object is already created we can return the reference of it.

Intrinsic and Extrinsic states:
  - Example,
    - Suppose in a text editor when we enter a charecter, an object of charecter class is created, the attributes of the charecter class are { name, font, size }
    - We do not need to create an object every time client enters a charecter since letter 'B' is no diffrent from another letter 'B'. When the client enters another 'B' we simply return the previously created object.
    - Now all these are intrinsic states (name, font, size), since they can be shared among the diffrent objects.
    - Now we add more attributes to the class they are row and column. They specify the position of the charecter in the document. Now these values will not be similar even for the same charecters. These attributes are called extrinsic.

Problem Statement:
  - We implement the creation of Terrorist and CounterTerrorist in the game of Counter Strike. So we have two classes one for Terrorist(T) and other for CounterTerrorist(CT).
  - Whenever the player asks for a weapon we assign him the weapon.
  - In the misson, The Terrorist task is to plant a bomb while the CounterTerrorist have to diffuse the bomb.

Pattern Implementation:
  - We use flyweight design pattern since here we need to reduce the object count for players.
  - Now we have n number of players playing CS, If we do not follow flyweight design pattern than we will have to create n number of objects one for each player.
  - But now we will have to create only 2 objects one for terrorist and other for counter terrorist.

  Intrinsic State:
    - Here 'task' is an intrinic state for both the players since this is always the same for T/CT. We can have some other states like the color which can also be same for T/CT classes.
  Extrinsic State:
    - Weapon is an extrinsic state since each player can have any weapon of his choice. Weapon need to be passed as a parameter by the client itself.
